# プロジェクト全般ルール

## プロジェクト概要

### はやおきリンク
朝活をする人を応援する共感型タイムラインと、地域のお店やイベントの情報でまちをもっと元気にするアプリケーション

### 主要機能
1. ユーザー管理機能
   - 会員登録・ログイン
   - プロフィール管理
   - アカウント設定

2. タイムライン機能
   - 朝の挨拶投稿
   - 今日の目標宣言
   - いいね・コメント機能
   - タイムライン表示・フィルタリング

3. 店舗情報機能
   - 朝営業店舗の登録・編集
   - 店舗検索・フィルタリング
   - 店舗詳細表示（営業時間、メニュー等）
   - 画像管理

4. イベント管理機能
   - イベントの登録・編集
   - イベント検索・フィルタリング
   - 参加申し込み管理
   - イベントリマインダー

## 各画面のルーティングとコンポーネント

### マイページ画面

- ルーティング: mypage/
- コンポーネント: pages.mypage
- 表示する内容 :
    - プロフィール画像
    - ユーザー名
    - 自己紹介文
    - 最近の投稿
    - 参加予定のイベント
    - 気になるお店一覧

### プロフィール編集画面

- ルーティング: mypage/profile/edit
- コンポーネント: pages.mypage.profile-edit
- 表示する内容 :
    - プロフィール画像
    - ユーザー名
    - 自己紹介文

### 申し込み済みイベント一覧画面

- ルーティング: mypage/events
- コンポーネント: pages.mypage.events
- 表示する内容 :
    - イベント名

### 最近の投稿一覧画面

- ルーティング: mypage/posts/index
- コンポーネント: pages.posts.index
- 表示する内容 :
    - 投稿

### 投稿新規作成画面

- ルーティング: posts/create
- コンポーネント: pages.posts.create
- 表示する内容 :
    - 投稿入力欄

 ### みんなの朝(タイムライン)画面

- ルーティング: posts/
- コンポーネント: pages.posts
- 表示する内容 :
    - 投稿入力欄
- 説明: 他のユーザーの投稿をタイムライン形式で見られる。コメントマークを押下するとコメント追加画面に遷移する。いいねスタンプを押せる。

 ### 投稿詳細画面

- ルーティング: posts/{post}
- コンポーネント: pages.posts.show
- 表示する内容 :
    - 投稿
- 説明: 他のユーザーの投稿に対してコメントをつけたり、スタンプをつけられる。



## 開発フロー

### Git Flow
- main: 本番環境用ブランチ
- develop: 開発用ブランチ
- feature/*: 機能開発用ブランチ
- fix/*: バグ修正用ブランチ
- release/*: リリース準備用ブランチ
- hotfix/*: 緊急修正用ブランチ

### ブランチ運用ルール
1. 機能開発
   ```
   develop → feature/*** → develop
   ```

2. リリース作業
   ```
   develop → release/v*.*.* → main
   ```

3. 緊急修正
   ```
   main → hotfix/*** → main & develop
   ```

## コミットメッセージ規約

### コミットメッセージ形式
```
<type>: <subject>

<body>

<footer>
```

### Type一覧
- feat: 新機能
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの意味に影響を与えない変更（空白、フォーマット等）
- refactor: バグ修正や機能追加のないコード改善
- perf: パフォーマンス改善
- test: テストの追加・修正
- chore: ビルドプロセスやツールの変更

### 例
```
feat: タイムライン投稿機能の実装

- 投稿フォームの作成
- バリデーション処理の追加
- 投稿保存処理の実装

Resolves: #123
```

## プルリクエストルール

### PRテンプレート
```markdown
## 概要
変更内容の簡潔な説明

## 変更内容
- 具体的な変更点1
- 具体的な変更点2

## 影響範囲
- 影響を受ける機能・画面

## テスト項目
- [ ] テスト項目1
- [ ] テスト項目2

## スクリーンショット
必要に応じて添付

## 補足事項
その他、レビュワーに伝えたい内容
```

### レビュールール
- 最低1名のレビュー承認が必要
- CIチェックがパスしていること
- コンフリクトが解消されていること
- コーディング規約に準拠していること

## ドキュメント管理

### 必須ドキュメント
1. README.md
   - プロジェクト概要
   - セットアップ手順
   - 開発環境要件
   - 主要コマンド

2. API仕様書
   - エンドポイント一覧
   - リクエスト・レスポンス形式
   - 認証方式
   - エラーコード

3. データベース設計書
   - ER図
   - テーブル定義
   - インデックス定義

4. 画面設計書
   - 画面遷移図
   - ワイヤーフレーム
   - UIコンポーネント設計

### ドキュメント更新ルール
- 機能追加・変更時は関連ドキュメントを更新
- API変更時は必ずAPI仕様書を更新
- DB設計変更時は必ずER図を更新

## テスト方針

### テスト種別
1. ユニットテスト
   - モデル
   - サービス
   - ユーティリティ

2. 統合テスト
   - コントローラー
   - ミドルウェア
   - API

3. E2Eテスト
   - 主要ユーザーフロー
   - クリティカルパス

### テストカバレッジ
- ユニットテスト: 80%以上
- 統合テスト: 主要機能を網羅
- E2Eテスト: クリティカルパスを網羅

## デプロイメントフロー

### 環境構成
- 開発環境（development）
- ステージング環境（staging）
- 本番環境（production）

### デプロイ手順
1. develop → staging
   - 自動テスト実行
   - コード品質チェック
   - 自動デプロイ

2. staging → production
   - 手動承認
   - 自動デプロイ
   - ヘルスチェック

### リリースチェックリスト
- [ ] テスト完了
- [ ] コードレビュー完了
- [ ] ドキュメント更新完了
- [ ] 環境変数確認
- [ ] バックアップ確認
- [ ] デプロイ手順確認

## セキュリティガイドライン

### 基本方針
- 最小権限の原則
- 多層防御の実施
- 定期的なセキュリティレビュー

### 実装要件
1. 認証・認可
   - 適切なパスワードポリシー
   - 多要素認証の実装
   - セッション管理の適切な実装

2. データ保護
   - 個人情報の暗号化
   - トークンの安全な管理
   - ログの適切な管理

3. 通信セキュリティ
   - HTTPS通信の強制
   - APIトークンの適切な管理
   - CORSの適切な設定

